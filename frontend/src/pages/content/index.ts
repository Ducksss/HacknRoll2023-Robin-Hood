// @ts-nocheck
import _ from "lodash";
import axios from "axios";
import styles from "../styl";

var threshold = 0;
var activePopup = false;
var audience = "Knowledgeable",
    formality = "Neutral",
    positivity = "Neutral",
    intent,
    context;

// Get the wrapper element
function getWrapper() {
    return document.querySelectorAll('div[class="notion-page-content"]')[0];
}

// Function to scan for new elements
let scanDiv = (function () {
    var MutationObserver =
        window.MutationObserver || window.WebKitMutationObserver;
    return function (obj, callback) {
        if (!obj || obj.nodeType !== 1) return;
        if (MutationObserver) {
            var mutationObserver = new MutationObserver(callback);
            mutationObserver.observe(obj, {
                childList: true,
                subtree: false
            });
            return mutationObserver;
        } else if (window.addEventListener) {
            obj.addEventListener("DOMNodeInserted", callback, false);
            obj.addEventListener("DOMNodeRemoved", callback, false);
        }
    };
})();

// Get the text content from the scanDiv wrapper
let getTextContent = (function (): string {
    return function (el) {
        let block = el.querySelectorAll('div[class="notion-selectable"]')[0];

        // Only proceed if query success, otherwise return empty string
        if (block) {
            let blockInnerTextContent = block.querySelectorAll(
                'div[data-content-editable-leaf="true"]'
            )[0];
            if (blockContent) return blockInnerTextContent.innerText;
            else return "";
        } else return "";
    };
})();

// Function to append advisory
let addWarning = (function () {
    return function (el: Element, score: number) {
        // Get the tweet from this element
        let blockInnerTextContent = el.querySelectorAll(
            'div[data-content-editable-leaf="true"]'
        )[0];

        if (blockInnerTextContent) {
            // Add the .warning class to the block from the style.css
        }
        return;
    };
})();

function getBlockTextContentRiskScore(blockText): number {
    // axios.post("http://localhost:5000/api/v1/analyze", {
    //     text: blockText
    // });

    // Return a random between 0 to 50
    return Math.random() * 50;
}

// Function to call for each element of the homepage
let runScript = (function () {
    return async function (allNodes) {
        for (i = 0; i < allNodes.length; i++) {
            // Reset score
            let score = 0;
            // Get the current node
            let node = allNodes[i];
            // Get block's text content for analysis
            let blockTextContent = getTextContent(node);
            // Make backend call to identify if content might be generated by a bot
            blockTextRiskScore = getBlockTextContentRiskScore(blockTextContent);
            // Log score of content
            console.log(
                "Paragraph has a risk score eval of: " + blockTextRiskScore
            );

            if (blockTextRiskScore > threshold) {
                console.log("THIS IS BEING INVOKED! INDEED!");
                addWarning(node, score);
            }
        }
    };
})();

function waitFor(
    varSetter: any,
    sleepTime: any,
    condition: any,
    continuation: any
) {
    let variable = varSetter();
    if (!condition(variable)) {
        setTimeout(
            () => waitFor(varSetter, sleepTime, condition, continuation),
            sleepTime
        );
    } else {
        continuation(variable);
    }
}

waitFor(
    getWrapper,
    2500,
    (wrapper) => wrapper !== undefined,
    function (wrapper) {
        console.log("Preliminary wrapper get succeeded");
        // First pass
        let blocks = wrapper.children;
        console.log("wrapper", wrapper.children);
        runScript(blocks);
        // Observe for changes of wrapper's child nodes
        (() => {
            scanDiv(wrapper, function (el) {
                var addedNodes = [],
                    removedNodes = [];

                // Record down added divs
                el.forEach((record) => {
                    record.addedNodes.length &
                        addedNodes.push(...record.addedNodes);
                });

                // Record down deleted divs
                el.forEach(
                    (record) =>
                        record.removedNodes.length &
                        removedNodes.push(...record.removedNodes)
                );

                // Run the script for added nodes
                runScript(addedNodes);

                console.log("Added:", addedNodes, "Removed:", removedNodes);
            });
        })();
    }
);

/** CSS */
var fa = document.createElement("style");
fa.type = "text/css";
fa.textContent =
    `@font-face { font-family: 'Pacifico'; font-style: normal; font-weight: 400; src: url("` +
    chrome.runtime.getURL("fonts/Pacifico-Regular.woff2") +
    '"); }';
document.head.appendChild(fa);

var fa2 = document.createElement("style");
fa2.type = "text/css";
fa2.textContent =
    `@font-face { font-family: 'Comfortaa'; font-style: normal; font-weight: 400; src: url("` +
    chrome.runtime.getURL("fonts/Comfortaa-Regular.woff2") +
    '"); }';
document.head.appendChild(fa2);

var fa3 = document.createElement("style");
fa3.type = "text/css";
fa3.textContent =
    `@font-face { font-family: 'Comfortaa'; font-style: normal; font-weight: 300; src: url("` +
    chrome.runtime.getURL("fonts/Comfortaa-Light.woff2") +
    '"); }';
document.head.appendChild(fa3);

var fa4 = document.createElement("style");
fa4.type = "text/css";
fa4.textContent =
    `@font-face { font-family: 'Comfortaa'; font-style: normal; font-weight: 700; src: url("` +
    chrome.runtime.getURL("fonts/Comfortaa-Bold.woff2") +
    '"); }';
document.head.appendChild(fa4);
